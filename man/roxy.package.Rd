% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/roxy.package.R
\name{roxy.package}
\alias{roxy.package}
\title{Automatic doc creation, package building and repository update}
\usage{
roxy.package(
  pck.source.dir,
  pck.version,
  pck.description,
  R.libs,
  repo.root,
  pck.date = Sys.Date(),
  actions = c("roxy", "package"),
  cleanup = FALSE,
  rm.vignette = FALSE,
  R.homes = R.home(),
  Rcmd.options = c(install = "--install-tests", build =
    "--no-manual --no-build-vignettes --md5", check = "--as-cran", Rd2pdf =
    "--pdf --no-preview"),
  URL = NULL,
  deb.options = NULL,
  readme.options = NULL,
  html.options = NULL,
  ChangeLog = list(changed = c("initial release"), fixed = c("missing ChangeLog")),
  Rbuildignore = NULL,
  Rinstignore = NULL,
  OSX.repo = list(main = "contrib", symlinks = "el-capitan"),
  ...
)
}
\arguments{
\item{pck.source.dir}{Character string,
      path pointing to the root directory of your package sources.}

\item{pck.version}{Character string,
      defining the designated version number. Can be omitted if actions don't
include \code{"roxy"}, then this information is read from the present DESCRIPTION file.}

\item{pck.description}{Data.frame holding the package description (see Examples section). Any data.frame with valid fields
will do,
      but you should use \code{\link[roxyPackage:package_description]{package_description}} if possible because it does
some basic validity checks.}

\item{R.libs}{Character string,
      valid path to the R library where the package should be installed to.}

\item{repo.root}{Character string,
      valid path to a directory where to build/update a local package repository.}

\item{pck.date}{Date class object or character string of the release date in YYYY-MM-DD format. Defaults to \code{Sys.Date()}.
If actions don't include \code{"roxy"} and neither \code{Date}, \code{Packaged},
      nor \code{Date/Publication} are found
in the present DESCRIPTION file, then \code{pck.date} will be used. Otherwise,
      the information from the DESCRIPTION file is used.}

\item{actions}{Character vector, must contain at least one of the following values:
\describe{
  \item{"roxy"}{Roxygenize the docs}
  \item{"cite"}{Update CITATION file}
  \item{"license"}{Update LICENSE file}
  \item{"readme"}{Generate initial README.md file}
  \item{"check"}{Do a full package check,
      calling \code{R CMD check}. Combine with \code{"package"} to do the check on the tarball, not the source directory.}
  \item{"package"}{Build & install the package, update source repository,
      calling \code{R CMD build} and \code{R CMD INSTALL}}
  \item{"binonly"}{Like \code{"package"},
      but doesn't copy the source package to the repository, to enable binary-only rebuilds}
  \item{"gitCheckout"}{Treats \code{pck.source.dir} as a git repository and \code{pck.version} as a branch or tag to checkout temporarily;
    only valid in combination with \code{"binonly"}}
  \item{"cl2news"}{Try to convert a ChangeLog file into an NEWS.Rd file}
  \item{"news2rss"}{Try to convert \code{inst/NEWS.Rd} into an RSS feed. You must also set
    \code{URL} accordingly}
  \item{"doc"}{Update PDF documentation (\code{R CMD Rd2pdf}) and vignettes if present; }
  \item{"html"}{Update HTML index files and compile HTML versions of README.md and NEWS.md (if \code{pandoc} is available).}
  \item{"win"}{Update the Windows binary package}
  \item{"macosx"}{Update the Mac OS X binary package}
  \item{"log"}{Generate initial ChangeLog or update a present ChangeLog file}
  \item{"deb"}{Update the Debian binary package with \code{\link[roxyPackage:debianize]{debianize}} (works only on Debian systems;
    see \code{deb.options},
      too). \code{URL} must also be set to generate Debian repository information}
  \item{"cleanRd"}{Insert line breaks in Rd files with lines longer than 90 chars}
  \item{"vignette"}{Generate initial vignette stub in directory \code{vignettes}; if \code{html.options} has a \code{flattr.id},
      it will be included}
  \item{"buildVignettes"}{Re-build all vignettes during the \code{"package"} action,
      to force generation of a vignette index in
    the source package (recommended if \code{VignetteBuilder} is set in the package description)}
  \item{"buildEmAll"}{Build binary packages for all configured R versions,
      not just the first. Only effective if multiple versions of R are actually provided (see above)}
}
Note that \code{"cl2news"} will write the \code{NEWS.Rd} file to the \code{inst} directory of your sources,
      which will overwrite
an existing file with the same name! Also note that if both a \code{NEWS/NEWS.Rd} and \code{ChangeLog} file are found,
      only
news files will be linked by the \code{"html"} action.}

\item{cleanup}{Logical,
      if \code{TRUE} will remove backup files (matching \code{.*~$} or \code{.*backup$}) from the source directory.}

\item{rm.vignette}{Logical,
      if \code{TRUE} and a vignette was build during the \code{"doc"} action and vignettes live in the directory \code{inst/doc},
they will not be kept in the source package but just be moved to the \code{./pckg/$PACKAGENAME} directory of the repository.}

\item{R.homes}{Path to the R installation to use. Can be set manually to build packages for other R versions than the default one,
if you have installed them in parallel. Should probably be used together with \code{R.libs}.}

\item{Rcmd.options}{A named character vector with options to be passed on to the internal calls of \code{R CMD build},
\code{R CMD INSTALL},
      \code{R CMD check} and \code{R CMD Rd2pdf}. Change these only if you know what you're doing!
Will be passed on as given here. To deactivate,
      options must explicitly be se to \code{""}, missing options will be used with the default values.
Please note that if you've set \code{VignetteBuilder} in the package description,
      the vignettes will always be re-build if you enabled the
\code{"buildVignettes"} action,
      even if you keep \code{--no-build-vignettes} in the build options.}

\item{URL}{Either a single character string defining the URL to the root of the repository (i.e.,
      which holds the directories \code{src}
etc., see below),
      or a named character vector if you need different URLs for different services. If you provide more than one URL, these are valid
names for values:
\describe{
  \item{\code{default}}{A mandatory fallback URL,
      will be used if not overridden by one of the other values. This is fully equivalent to the global value
    if only one character string is provided.}
  \item{\code{debian}}{Used for the Debian package repository if different from the default.}
  \item{\code{mirror.list}}{URL pointing to a list of mirrors users should choose from,
      rather than using one particular host name for the Debian repository.
    Will only be used in the HTML instructions for a Debian repository.}
  \item{\code{debian.path}}{Can be used to define a custom path users would need to specify in addition to the main URL.
    Defaults to \code{"/deb"}, and if given, it must start with a slash.
    Will be used in combination with \code{default},
      \code{debian} or \code{mirror.list}. It is not advisable to combine it with \code{default}, because you will
    have to manually rename the directory generated after each run!}
}
These URLs are not the path to the local file system,
      but should be the URLs to the respecive repository as it is available
via internet. This option is necessary for (and only interpreted by) the actions \code{"news2rss"},
      \code{"deb"}, and possibly \code{"html"} --
if \code{flattr.id} is also set in \code{html.options},
      a Flattr meta tag be added to the HTML page.}

\item{deb.options}{A named list with parameters to pass through to \code{\link[roxyPackage:debianize]{debianize}}. By default,
      \code{pck.source.dir}
and \code{repo.root} are set to the values given to the parameters above,
      and if packages are being build for R 3.5, the default \code{deb.dir} changes
from \code{"deb"} to \code{"debR35"},
      and if built for R 4.0  to \code{"debR40"}. As for the other options, if not set, the defaults of \code{debianize} will be used.}

\item{readme.options}{A named list with parameters that add optional extra information to an initial README.md file,
      namely instructions to install the package
directly from a GitHub repository. Ignore this if you don't use GitHub. Theoretically,
      you can overwrite all values of the internal
function \code{readme_text} (e.g.,
      try \code{formals(roxyPackage:::readme_text)}). But in practice, these two should be all you need to set:
\describe{
  \item{\code{githubUser}}{Your GitHub user name,
      can be used to contruct the GitHub repo URL}
}
All other missing values are then guessed from the other package information. It is then assumed that the GitHub repo has the same name as the package.}

\item{html.options}{A named list with parameters to be used for generating the HTML files of the repository. These values are recognized:
\describe{
  \item{\code{index}}{A character string for the headline of the global index HTML file; if missing,
      "Available R Packages" will be used as default}
  \item{\code{title}}{A character string for the title tag prefix of the package index HTML file; if missing,
      "R package" will be used as default}
  \item{\code{flattr.id}}{A Flattr meta ID,
      will be added to the headers of package specific HTML files, and to a vignette stub if the \code{"vignette"} action is active}
  \item{\code{repo.flattr.id}}{A Flattr meta ID,
      will be added to the headers of all global HTML files of the repository}
  \item{\code{imprint}}{A named character string used as a URL to link to an imprint page; he name is used as the link text}
  \item{\code{privacy.policy}}{A named character string used as a URL to link to a privacy policy statement in accordance with GDPR; the name is used as the link text}
}}

\item{ChangeLog}{A named list of character vectors with log entry items. The element names will be used as section names in the ChangeLog entry,
and each character string in a vector will be pasted as a log item. The news you provide here will be appended to probably present news,
      while
trying to prevent duplicate entries to appear. If you need more control,
      don't use the \code{"log"} action, but have a look at
\code{\link[roxyPackage:updateChangeLog]{updateChangeLog}}. Also note that the date of altered entries will be updated automatically,
      unless
you don't call the \code{"roxy"} action, too.}

\item{Rbuildignore}{A character vector to be used as lines of an \code{.Rbuildignore} file. If set,
      this will replace an existing \code{.Rbuildignore}
file. Setting it to an empty string (\code{""}) will remove the file,
      the default value \code{NULL} will simply keep the file, if one is present.}

\item{Rinstignore}{A character vector to be used as lines of an \code{.Rinstignore} file. If set,
      this will replace an existing \code{.Rinstignore}
file. Setting it to an empty string (\code{""}) will remove the file,
      the default value \code{NULL} will simply keep the file, if one is present.}

\item{OSX.repo}{A named list of character vectors,
      one named \code{"main"} defines the main directory below \code{./bin/macosx/} where packages for
Mac OS X should be copied,
      and the second optional one named \code{"symlink"} can be used to set symbolic links, e.g., \code{symlinks="el-capitan"}
would also make the repository available via \code{./bin/macosx/mavericks}. Symbolic links will be ignored when run on on Windows. If you use them,
make sure they're correctly transferred to your server, where applicable.}

\item{...}{Additional options passed through to \code{roxygenize}.}
}
\description{
This function should help to create R packages with full documentation and updates to a local repository.
It supports source and binary packaging (Windows and Mac OS X; see Note section on the limitations).
}
\details{
For the documentation \code{roxygen2}[1] is used. Next to the actual in-line documentation of the package's contents,
      you only need to
prepare a data.frame to be used to write a package \code{DESCRIPTION} file. See the example section for details on that. This means
that you \emph{neither} edit the \code{DESCRIPTION} \emph{nor} the \code{*-package.R} file manually,
      they will both be created \emph{automatically}
by this function with contents according to these settings!
}
\note{
The binary packaging is done simply by zipping (Windows) or targzipping (Mac OS X) the built and installed package. This should
do the trick as long as your package is written in pure R code. It will most likely not produce usable packages if it contains
code in other languages like C++.
}
\section{Sandboxing}{

If you want to check out the effects of roxy.package() without touching you actual package sources,
      try \code{\link[roxyPackage:sandbox]{sandbox}}
to set up a safe testing environment.
}

\section{Repository layout}{

The repository will have this directory structure, that is,
      below the defined \code{repo.root}:

\describe{
   \item{\code{./src/contrib}}{Here go the source packages}
   \item{\code{./bin/windows/contrib/$RVERSION}}{Here go the Windows binaries}
   \item{\code{./bin/macosx/contrib/$RVERSION}}{Here go the Mac OS X binaries (see \code{OSX.repo} for further options)}
   \item{\code{./pckg/index.html}}{A global package index with links to packages' index files,
      if actions included \code{"html"}}
   \item{\code{./pckg/web.css}}{A CRAN-style CSS file, if actions included \code{"html"}}
   \item{\code{./pckg/$PACKAGENAME}}{Here go documentation PDF and vignette,
      as well as a \code{ChangeLog} file, if found.
     and an \code{index.html} with package information, if actions included \code{"html"}.
     This is probably a bit off-standard, but practical if you several packages.}
}
}

\section{Converting ChangeLogs into NEWS}{

See \code{\link[roxyPackage:cl2news]{cl2news}} for details.
}

\section{Build for multiple R versions}{

The options \code{R.libs} and \code{R.homes} can take a vector of strings. This can be used to build packages for multiple R versions,
provided you installed them on your system. By default,
      \code{roxy.package} will only use the first entry of both and ignore the rest,
except if you use the \code{"buildEmAll"} action. This makes it easy to use \code{roxy.package} in a script,
      as you can turn multiple builds
on and off with one action, and leave the rest untouched.

If you're running GNU/Linux,
      an easy way of preparing for multiple builds is to fetch the R sources from CRAN, calling
\code{"./configure"} with something like \code{"--prefix=$HOME/R/<R version>"},
      so that \code{"make install"} installs to that path.
Let's assume you did that with R 3.4.4 and 3.3.3,
      you could then call \code{roxy.package} with options like
\code{R.homes=c("home/user/R/R-3.4.4",
      "home/user/R/R-3.3.3")} and \code{R.libs=c("home/user/R/R-3.4.4/lib64/R/library",}
\code{"home/user/R/R-3.3.3/lib64/R/library")}. If you add \code{"buildEmAll"} to the actions to perform,
      \code{roxy.package} will then
call itself recursively for each given R installation; if you omit \code{"buildEmAll"},
      it will only build packages for R 3.4.4, as that
is the first configured version.

One thing you should be aware of is that \code{roxy.package} will not perform all actions each time. That is because some of them,
      namely
\code{"roxy"}, \code{"cite"}, \code{"license"}, \code{"doc"}, \code{"cl2news"},
      \code{"news2rss"}, \code{"cleanRd"}, \code{"readme"},
\code{"buildVignettes"}, and \code{"vignette"},
would overwrite previous results anyway,
      so they are only considered during the first run. Therefore, you should always place the R version which
should be used for these actions first in line. The \code{"html"} action will list all Windows and OS X binary packages. The \code{"deb"}
action will only actually debianize and build a binary package during the first run, too.
}

\section{Windows}{
 On Windows,
      the actions \code{"doc"} and \code{"check"} will only work correctly if you have installed and configured LaTeX
accordingly, and you will also need Rtools set up for packaging.
}

\section{CRAN compliance}{
 The CRAN policies can sometimes be very strict. This package should allow you to produce packages which are suitable
for release on CRAN. But some steps have to be taken care of by yourself. For instance,
      CRAN does currently not allow copies of common licenses
in a source package, nor a \code{debian} folder. Therefore,
      if your package is supposed to be released on CRAN, you should include
\code{Rbuildignore=c("debian", "LICENSE")} to the function call.
}

\section{Temporary git checkouts}{
 If you want to rebuild binaries of something that was already released,
      i.e. by using the \code{"binonly"} action,
and if your source directory is a git repository,
      then the action \code{"gitCheckout"} can temporarily checkout the source version to build
and switch back to the status quo afterwards again. This might or might not work as you expect,
      depending on whether you organize your code like
it is expected here. That is, each release must be tagged properly,
      with the exact version number as the tag name. You should also commit all
current changes to the code before you use this. Internally,
      \code{roxy.package} will try to find out the current branch of the git repository,
then checkout the version number you provided as the new branch or tag,
      do all the packaging, and checkout bach to the previous branch.
}

\examples{
\dontrun{
## package description as data.frame:
pckg.dscrptn <- package_description(
  Package="SquareTheCircle",
  Type="Package",
  Title="Squaring the circle using Heisenberg compensation",
  Author="Ernst Dölle [aut, cre, cph], Ludwig Dölle [trl,
      ctb] (initial translation to whitespace)",
  AuthorsR="c(person(given=\"Ernst\", family=\"Dölle\",
       email=\"e.a.doelle@example.com\",
       role=c(\"aut\", \"cre\", \"cph\")),
     person(given=\"Ludwig\", family=\"Dölle\",
       role=c(\"trl\", \"ctb\"),
       comment=\"initial translation to whitespace\")
     )",
  Maintainer="E.A. Dölle <doelle@eternalwondermaths.example.org>",
  Depends="R (>= 2.10.0),heisenberg (>= 0.23),tools",
  Enhances="rkward",
  Description="This package squares the circle using Heisenberg compensation.
      The code came from a meeting with Yrla Nor that i had in a dream. Please
      don't forget to chain your computer to the ground, because these
      algorithms might make it fly.",
  License="GPL (>= 3)",
  Encoding="UTF-8",
  LazyLoad="yes",
  URL="http://eternalwondermaths.example.org"
)
# hint no. 1: you *don't* specify version number and release date here,
#   but all other valid fields for DESCRIPTION files must/can be defined
# hint no. 2: most of this rarely changes, so you can add this to the
#   internals of your package and refer to it as
#   roxy.package(pck.description=SquareTheCircle:::pckg.dscrptn, ...)
# hint no. 3: use "AuthorR" for the "Author@R" field, or "AuthorsR" for
# R >= 2.14, to work around naming problems

roxy.package(pck.source.dir="~/my_R_stuff/SquareTheCircle",
  pck.version="0.01-2",
  pck.description=pckg.dscrptn,
  R.libs="~/R",
  repo.root="/var/www/repo",
  actions=c("roxy", "package", "doc"))
}
}
\references{
[1] \url{https://CRAN.R-project.org/package=roxygen2}
}
\seealso{
\code{\link[roxyPackage:package_description]{package_description}} for proper package description,
      and
   \code{\link[roxyPackage:sandbox]{sandbox}} to run roxy.package() in a sandbox.
}
