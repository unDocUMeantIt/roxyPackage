% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/debianize.R
\name{debianize}
\alias{debianize}
\title{Basic Debian package creation from R source packages}
\usage{
debianize(
  pck.source.dir,
  repo.root,
  build.dir = tempdir(),
  revision = 1,
  repo.name = "roxypackage",
  origin = paste0("other-", repo.name),
  distribution = "unstable",
  component = "main",
  urgency = "low",
  changelog = c("new upstream release"),
  deb.description = NULL,
  depends.origin = "cran",
  depends.origin.alt = list(),
  actions = c("deb", "bin", "src"),
  overwrite = c("changelog", "control", "copyright", "rules", "compat"),
  bin.opts = "-rfakeroot -b -uc",
  arch = "all",
  compat = 10,
  epoch = NULL,
  gpg.key = NULL,
  keyring = NULL,
  gpg.version = 2,
  deb.keyring.options = NULL,
  compression = "xz",
  keep.build = FALSE,
  keep.existing.orig = FALSE,
  replace.dots = FALSE,
  deb.dir = "deb",
  R.libs.append = NULL
)
}
\arguments{
\item{pck.source.dir}{Character string,
      path pointing to the root directory of your package sources, to a local R package source tarball, or
a full URL to such a package tarball. Tarballs will be downloaded to a temporary directory,
      if needed, extracted, and then debianized.}

\item{repo.root}{Character string,
      valid path to a directory where to build/update a local package repository.}

\item{build.dir}{Character string,
      valid path to a directory where to build the package. If this directory is not empty, a temporary
directory will be created inside automatically.}

\item{revision}{Numeric or a character string, the Debian package revision information.}

\item{repo.name}{Character string,
      the name for your debian package repository. This can be used to generate an OpenPGP debian package from the
given \code{gpg.key},
      unless you change the default behaviour with the parameter \code{deb.keyring.options}}

\item{origin}{Character string, should be either "noncran" or "other-<yourname>",
      used for the package name. This indicates that your package is
not an official CRAN or BioC package.}

\item{distribution}{Character string,
      the Debain (based) distribution your package is intended for.}

\item{component}{Character string, the Debain component of the distribution.}

\item{urgency}{Character string,
      urgency information for this release (refer to [1] if you want to change this).}

\item{changelog}{Character vector,
      log entries for the \code{./debian/changelog} file if it is going to be changed.}

\item{deb.description}{A named list or data.frame with further information,
      especially for the \code{./debian/control} file. This is similar to
the \code{pck.description} parameter of \code{\link[roxyPackage:roxy.package]{roxy.package}},
      only with different variables.
Note that if certain key values are missing,
      \code{debianize} will automatically use some defaults:
\describe{
  \item{Build.Depends.Indep}{\code{"debhelper (>> 9.0.0), r-base-dev (>= <R.vers>),
      cdbs"}, plus Depends/Imports in \code{DESCRIPTION} in debianized format;
    if \code{arch} is not set to \code{"all"},
      the field \code{Build.Depends} is used instead}
  \item{Depends}{\code{"r-base-core (>= <R vers>)"},
      plus Depends/Imports in \code{DESCRIPTION} in debianized format.
    Packages build for R 3.5 will depened on \code{"r-api-3.5"},
      for R 3.4 on \code{"r-api-3.4"}, and since R 3.2 on \code{"r-api-3"}, too.}
  \item{Suggests}{Suggests in \code{DESCRIPTION} in debianized format}
  \item{Maintainer}{generated from \code{\link[base:Sys.info]{Sys.info}} (\code{user <login@nodename>}),
      with a warning.}
  \item{Section}{\code{"gnu-r"}}
  \item{Priority}{\code{"optional"}}
  \item{Homepage}{URL in \code{DESCRIPTION}}
}
Refer to [1] for further available fields in the \code{./debian/control} file. In case you would like to add to the fields definig relations to other packages
like \code{Build.Depends.Indep} or \code{Depends} rather than replacing them,
      provide a named list with a character vector called "append". For example:
\code{Depends=list(append=c("libmysql++3"))}.}

\item{depends.origin}{A character string to set the default origin for R packages which are a dependency of this one. In case all dependencies can be
met by Debian packages from CRAN releases,
      you can leave this to the default setting. If you need more control, see \code{depends.origin.alt}.}

\item{depends.origin.alt}{A named list of alternative origins for R packages which are a dependency of this one. By default,
      \code{depends.origin} is used,
but if you know that certain dependencies are of different origin (e.g.,
      your own repository), you can set this here. Each list element must be named after
the R package you want to set an origin for,
      and must be a character vector or single string, like \code{list(foo="other-janedoe")}. If more than one origin
is given,
      they will be set as alternatives (using the pipe \code{"|"} as "or"). For full control over the package name use \code{list(foo=NULL)},
which will fallback to \code{foo} as the name of the Debian package.}

\item{actions}{Character vector, naming the actions to perform:
\describe{
  \item{"deb"}{Debianize the package sources.}
  \item{"bin"}{Build the Debian package.}
  \item{"src"}{Build a Debian source package.}
}}

\item{overwrite}{Character vector, naming the files which should be updated:
\describe{
  \item{"changelog"}{Update \code{./debian/changelog},
      but only if no entry for this package version and revision is there yet}
  \item{"compat"}{Re-write \code{./debian/compat}}
  \item{"control"}{Re-write \code{./debian/control}}
  \item{"copyright"}{Re-write \code{./debian/copyright}}
  \item{"rules"}{Re-write \code{./debian/rules}}
  \item{"gpg.key"}{Re-write the keyring package in the repository (by default present packages are left unchanged)}
}}

\item{bin.opts}{Character string,
      options to pass through to \code{dpkg-buildpackage} for the \code{"bin"} action.}

\item{arch}{Character string, architecture the package is build for.}

\item{compat}{Integer value, specifying the \code{debhelper} compatibility level.}

\item{epoch}{Integer value, the Debian package epoch information.}

\item{gpg.key}{Character string,
      the GnuPG key ID for the key that should be used for signing the Release file (secure apt).
This key must be available in your keyring (or in the one specified by \code{keyring}). Note that this function defaults to using the SHA256 algorithm for signing (not SHA1).
Mandatory for \code{"bin"} and \code{"src"} actions.}

\item{keyring}{Character string, path to an additional keyring file to use.}

\item{gpg.version}{Integer number,
      specifiying the GnuPG major version number. By default \code{gpg2} is assumed.}

\item{deb.keyring.options}{Named list,
      extra options to pass through to \code{\link[roxyPackage:debianizeKeyring]{debianizeKeyring}}.
By default, the value for \code{maintainer} will be taken from \code{deb.description},
      and the values for \code{gpg.key},
\code{repo.name}, \code{repo.root}, \code{build.dir}, \code{distribution},
      \code{component}, \code{urgency}, \code{keyring}, and \code{gpg.version}
are taken from the settings given with the \code{debianize} function call.}

\item{compression}{Character string,
      compression format for Debian source packages. Currently \code{"xz"} and \code{"gzip"}
are supported.}

\item{keep.build}{Logical. If \code{build.dir} is not \code{pck.source.dir},
      work is done in generated folder with a random name.
Usually it is removed afterwards, unless you set this option to \code{TRUE}.}

\item{keep.existing.orig}{Logical,
      if \code{TRUE} and there is already a \code{*.orig.tar.[gz|xz]} archive in the repository matching this version,
it will not be replaced with a re-packaged one but remains as is. This is useful for binary-only rebuilds.}

\item{replace.dots}{Logical. The proposed Debian R Policy actually asks to replace all dots in package names by hyphens. However,
this is implemented differently in \code{r-cran.mk} and will lead to unbuildable packages. So the default here is to ignore the policy draft and keep dots
in package names,
      as is true for a lot of CRAN packages as well (code is law). In case you run into problems here
(symptoms include a failing .deb build because the directory \code{build/<package name>} doesn't exist),
      try turning this switch. If \code{TRUE}
dots will be replaced by hyphens in both source and binary package names. Note that building a package by calling this function should always
work, because it will automatically create a symlink in the build directory if needed.}

\item{deb.dir}{Character string,
      name to use for the root directory of the debian repository. Defaults to \code{"deb"}, which is obviously a good choice,
but you might want to use different directories for different builds, e.g.,
      a separate one for R 3.5 packages.}

\item{R.libs.append}{An optional vector of paths pointing to R libraries to be included for package lookup. These locations will be added
to package build calls by appending them to the \code{R_LIBS_USER} environment variable accordingly,
      if not \code{NULL}. This is only
only useful if R packages are provided by dependencies but not installed to default locations,
      so you need to point to them explicitly in order
for the packaging to finish successfully.}
}
\description{
This function attempts to 'debianize' your R source package. This means,
      it will add a \code{debian} directory
to sources' root directory, and populate it with needed files for Debian package building,
      as outlined in the Debian R Policy
by Eddelbuettel & Bates (2003) and the Debian Policy Manual[1], version 3.9.3.1.
}
\details{
The file \code{./debian/source/format} will also be created only once. The files \code{./debian/control},
      \code{./debian/copyright} and
\code{./debian/rules} will be generated from the information found in the \code{DESCRIPTION} file of the R package.
Once created,
      these files won't be touched again if they are not defined in the \code{overwrite} parameter. This enables you to save
files from being re-written, e.g. if you altered them manually.

The \code{./debian/changelog} is special here,
      as \code{overwrite} doesn't mean the whole file will be overwritten, but rather that the
function checks if the changelog already contains an entry for this particular package version and revision,
      and only if this is not the
case will add one at the beginning of the file,
      including the log entries defined by the \code{changelog} parameter (each string will
become one log entry).

The function will try to detect the license you specified in the \code{DESCRIPTION} file,
      and if it is one of the following licenses,
generate some useful info on how to get the full license on a Debian system:
\itemize{
   \item{Apache License}
   \item{Artisitic License}
   \item{BSD License}
   \item{GNU General Public License (GPL)}
   \item{GNU Lesser General Public License (LGPL)}
}
}
\note{
Please note that the package will always be built against the R version installed by your package management!
Also, this function responds to \code{\link[roxyPackage:sandbox]{sandbox}}.
}
\section{Building the actual package}{
 If you're running the R session on a Debian based system,
      the function can build the debian package,
but it would likely fail when it comes to signing the .changes/.dsc files,
      because \code{gpg} gets invoked without \code{"--no-tty"}.
You'd have to sign those files later, e.g. with \code{debsign},
      if you really need this. However, secure-apt can still be ensured, if you provide
a valid GnuPG key ID from your keyring,
      which will then be used to sign the generated \code{Release} file. If not present yet, a copy of
the public key will automatically be saved to the repository,
      in a file named \code{<key ID>.gpg}.

Package building is done in a temporal directory,
      and the source files a copied there first. Set \code{build.dir=pck.source.dir} if
you want to build in-place instead.
}

\section{Package dependencies}{
 This function will make no attempts to guess what package dependencies must be fulfilled.
That is, if the defaults don't fit (see below),
      then you must define these dependencies yourself via the \code{deb.description}
parameter (setting appropriate values for fields like \code{Build.Depends},
      \code{Build.Depends.Indep} and \code{Depends}). In case your R package
depends on other R packages,
      you will have to ensure that these are also available as Debian packages (and define them
as dependencies),
      so the package management can take care of resolving these dependencies transparently. Otherwise users might
have a hard time figuring out how to get your package to work,
      if the building process doesn't fail in the first place.

That said,
      you should always try to debianize the package without manual dependencies set first. After that, look at the generated \code{control}
file and see if there are problems at all. Usually the default method is supposed to be quite clever when it comes to detect dependencies from the
actual package \code{DESCRIPTION} file (it will automatically translate those into proper Debain package names,
      where tuning is possible via the
\code{depends.origin} and \code{depends.origin.alt} parameters).
}

\section{Repository access}{
 After you debianized your package and built some Debian packages,
      \code{debianize} will prepare a Debain package repository
in the specified directory (can be the same as used with \code{roxy.package}). You can now access it locally on your machine,
      or upload the whole thing
to a web server etc. Basically,
      it should work if you add these lines to your repository configuration:

\code{deb http://<URL you uploaded to>/deb <distribution> <component>}

\code{deb-src http://<URL you uploaded to>/deb <distribution> <component>}
}

\section{Debianizing arbitrary packages}{
 With a little luck,
      this function can almot automatically debianize any R package sources. You can even provide
the \code{pck.source.dir} parameter with a URL to package sources (e.g.,
      a source package from CRAN), and \code{debianize} will do its best to end up
with an installable debian package in the specified repository root.
}

\examples{
\dontrun{
debianize(
  pck.source.dir="~/my_R_stuff/SquareTheCircle",
  repo.root="/var/www/repo",
  origin="other-doelle",
  revision=4,
  changelog=c("re-compiled docs"),
  deb.description=list(
    Depends=c("r-base-dev (>= 3.5.0), r-api-3.5, r-cran-foreign"),
    Maintainer="A. Sistent <sistent@eternalwondermaths.example.org>"),
  actions=c("deb"))

# let's try to debianize some R package from CRAN
debianize(
  pck.source.dir="http://cran.r-project.org/src/contrib/roxygen2_4.0.1.tar.gz",
  repo.root=tempdir(),
  deb.description=list(
    Maintainer="A. Sistent <sistent@eternalwondermaths.example.org>"
  )
)
}
}
\references{
Eddelbuettel, D. & Bates, D. (2003). \emph{Debian R Policy -- Draft Proposal v 0.1.3}.
  Available from \url{http://lists.debian.org/debian-devel/2003/12/msg02332.html}

[1] Debian Policy Manual: \url{http://www.debian.org/doc/debian-policy}
}
\seealso{
\code{\link[roxyPackage:sandbox]{sandbox}} to run debianize() in a sandbox.
}
